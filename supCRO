// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract SupCRO is ERC20, Ownable {
    
    
    
  
    constructor() ERC20("SUPCRO", "SUP") {
      
      _mint(msg.sender, 10000 * 10 ** decimals());
      
    }


    
    uint256 public cost = 500 ether;
    uint256 public maxSupply = 10000000;
    uint256 public maxMintAmount = 10000;

    function setCost(uint256 _newCost) public onlyOwner() {
        cost = _newCost;
    }

    function mintAdmin(address to, uint256 amount) public onlyOwner {
        uint256 supply = totalSupply();
        require(amount > 0);
        require(amount <= maxMintAmount);
        require(supply + amount <= maxSupply);
        _mint(to, amount);
    }
    
    
    function mint(address _to, uint256 _mintAmount) public payable {
        uint256 supply = totalSupply();
        require(_mintAmount > 0);
        require(_mintAmount <= maxMintAmount);
        require(supply + _mintAmount <= maxSupply);
    
        if (msg.sender != owner()) {
            
              require(msg.value >= cost * _mintAmount);
            
        }
    
        for (uint256 i = 1; i <= _mintAmount; i++) {
          _mint(_to, supply + i);
        }
    }
    
    
    
    function withdraw() public payable onlyOwner {
        require(payable(msg.sender).send(address(this).balance));
    }

}
